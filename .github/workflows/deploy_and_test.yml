name: Deploy to GCP

on:
  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      env:
        description: 'The environment to deploy to (e.g., dev, prod)'
        required: true
        default: 'dev'
        options:
          - dev
          - prod

permissions:
  id-token: write
  contents: read

jobs:
  upload:
    name: Zip and Upload to GCP
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.env || 'dev' }}

    outputs:
      gs_uri: ${{ steps.upload-to-gcs.outputs.uri }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Zip files
        run: |
          zip ini-reader.zip main.py requirements.txt

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Upload to Google Cloud Storage
        uses: google-github-actions/upload-cloud-storage@v1
        with:
          path: ini-reader.zip
          destination: ${{ secrets.GCP_ARTIFACT_BUCKET }}
          process_gcloudignore: false

  deploy:
    name: Deploy to Cloud Function
    runs-on: ubuntu-latest
    needs: upload
    environment: ${{ github.event.inputs.env || 'dev' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Clone Terraform Module Repository
        run: |
          git clone https://github.com/cardonas/ark-manager-terraform.git terraform-module

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform-module/modules/cloud_function

      - name: Terraform Plan
        run: |
          echo ${{ secrets.GCP_REGION }}
          terraform plan \
            -var="project=${{ secrets.GCP_PROJECT_ID }}" \
            -var="region=${{ secrets.GCP_REGION }}" \
            -var="function_name=ini-reader" \
            -var="artifact_bucket=ark-manager-artifacts-${{ github.event.inputs.env }}" \
            -var="function_source=${{ needs.upload.outputs.gs_uri }}" \
            -var="service_account_email=${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}" \
            -out=tfplan
        working-directory: ./terraform-module/modules/cloud_function

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve tfplan
          OUTPUT=$(terraform output -json | jq -r '.function_url.value')
          echo "HTTPS_TRIGGER_URL=$OUTPUT" >> $GITHUB_ENV
        working-directory: ./terraform-module/modules/cloud_function

  test:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: deploy
    environment: ${{ github.event.inputs.env || 'dev' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Tox
        run: pip install tox

      - name: Run Integration Tests
        run: tox -r -e integration
        env:
          HTTPS_TRIGGER_URL: ${{ env.HTTPS_TRIGGER_URL }}
